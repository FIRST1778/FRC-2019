plugins {
  id "java"
  id "checkstyle"
  id "edu.wpi.first.GradleRIO" version "2019.4.1"
  id "com.diffplug.gradle.spotless" version "3.20.0"
  id "net.ltgt.errorprone" version "0.7.1"
  id "com.github.ben-manes.versions" version "0.21.0"
}

def ROBOT_MAIN_CLASS = "frc.robot.Main"

//Define my targets (RoboRIO) and artifacts (deployable files)
//This is added by GradleRIO's backing project EmbeddedTools.
deploy {
  targets {
    roboRIO("roborio") {
      //Team number is loaded either from the .wpilib/wpilib_preferences.json
      //or from command line. If not found an exception will be thrown.
      //You can use getTeamOrDefault(team) instead of getTeamNumber if you
      //want to store a team number in this file.
      team = frc.getTeamNumber()
    }
  }
  artifacts {
    frcJavaArtifact('frcJava') {
      targets << "roborio"
      //Debug can be overridden by command line, for use with VSCode
      debug = frc.getDebugOrDefault(false)
    }
    //Built in artifact to deploy arbitrary files to the roboRIO.
    fileTreeArtifact('frcStaticFileDeploy') {
      //The directory below is the local directory to deploy
      files = fileTree(dir: 'src/main/resources')
      //Deploy to RoboRIO target, into /home/lvuser/deploy
      targets << "roborio"
      directory = '/home/lvuser/deploy'
    }
  }
}

repositories { mavenCentral()}

//Defining my dependencies. In this case, WPILib (+ friends), and vendor libraries.
//Also defines JUnit 4.
dependencies {
  compile wpi.deps.wpilib()
  compile wpi.deps.vendor.java()
  nativeZip wpi.deps.vendor.jni(wpi.platforms.roborio)
  nativeDesktopZip wpi.deps.vendor.jni(wpi.platforms.desktop)

  errorprone("com.google.errorprone:error_prone_core:2.3.3")

  testCompile "org.junit.jupiter:junit-jupiter-api:5.5.0-M1"
  testCompile "org.junit.jupiter:junit-jupiter-params:5.5.0-M1"
  testRuntime "org.junit.jupiter:junit-jupiter-engine:5.5.0-M1"
  testCompile "org.assertj:assertj-core:3.12.2"
}

compileJava { dependsOn 'spotlessApply' }

test {
  useJUnitPlatform { excludeTags 'slow', 'robot-dependent'}
  testLogging.showStandardStreams = true}

spotless {
  java { googleJavaFormat("1.7") }
  groovyGradle {
    greclipse()
    indentWithSpaces(2)}
}

checkstyle {
  ignoreFailures = false
  toolVersion = '8.16'
  config = rootProject.resources.text.fromFile('etc/checkstyle/checkstyle.xml')
  configProperties = [ "suppressionFile" : project(':').file('etc/checkstyle/suppressions.xml')]
}

//Setting up my Jar File. In this case, adding all libraries into the main jar ('fat jar')
//in order to make them all available at runtime. Also adding the manifest so WPILib
//knows where to look for our Robot Class.
jar {
  from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
  manifest edu.wpi.first.gradlerio.GradleRIOPlugin.javaManifest(ROBOT_MAIN_CLASS)
}

wrapper { gradleVersion = '5.0' }